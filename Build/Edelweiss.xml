<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Edelweiss</name>
    </assembly>
    <members>
        <member name="T:Edelweiss.Loenn.ILuaConvertible">
            <summary>
            Makes a class convertible into a Loenn-compatible Lua table.
            </summary>
        </member>
        <member name="M:Edelweiss.Loenn.ILuaConvertible.ToLuaTable(MoonSharp.Interpreter.Script)">
            <summary>
            Converts the class into a Lua table.
            </summary>
        </member>
        <member name="T:Edelweiss.Loenn.LoennModule">
            <summary>
            Base class for a custom implementation of a Loenn module.
            </summary>
        </member>
        <member name="M:Edelweiss.Loenn.LoennModule.Load">
            <inheritdoc/>
        </member>
        <member name="P:Edelweiss.Loenn.LoennModule.ModuleName">
            <summary>
            The name of the Loenn module this replaces.
            </summary>
        </member>
        <member name="P:Edelweiss.Loenn.LoennModule.TableName">
            <summary>
            The name of the table this module defines. If the module is global and this is overridden, 
            this will be the name of the global instead of the module name.
            </summary>
        </member>
        <member name="P:Edelweiss.Loenn.LoennModule.Global">
            <summary>
            If false, the module is used using require(). If true, the module is accessible as a global
            </summary>
        </member>
        <member name="M:Edelweiss.Loenn.LoennModule.GenerateTable(MoonSharp.Interpreter.Script)">
            <summary>
            Generates the table for the module
            </summary>
        </member>
        <member name="T:Edelweiss.Main">
            <summary>
            
            </summary>
        </member>
        <member name="M:Edelweiss.Main.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Edelweiss.Main.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:Edelweiss.Main.Exit">
            <summary>
            
            </summary>
        </member>
        <member name="T:Edelweiss.Mapping.Drawables.Drawable">
            <summary>
            The base type for any object that can be drawn to the frontend.
            All inheriting objects must define a parameterless constructor and a constructor accepting a table.
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.Drawable.depth">
            <summary>
            The render depth of the drawable. Positive values are further back and negative values are further forward.
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Drawable.Draw">
            <summary>
            Draws the object to the current SpriteDestination.
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Drawable.Bounds">
            <summary>
            Gets the rectangle that covers the drawable
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Drawable.Load">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Drawable.FromTable(MoonSharp.Interpreter.Table)">
            <summary>
            Creates a Drawable from a given Lua table depending on the _type defined in the table.
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if the _type in the table is not a defined Drawable.</exception>
            <exception cref="T:System.MissingMethodException">Thrown if the found Drawable type does not have a constructor accepting a table.</exception>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Drawable.ToLuaTable(MoonSharp.Interpreter.Script)">
            <summary>
            Converts the drawable to a table
            </summary>
            <param name="script">The script the table should belong to</param>
        </member>
        <member name="T:Edelweiss.Mapping.Drawables.EmptyDrawable">
            <summary>
            An empty drawable, draws nothing.
            Used as a fallback if "_type" is not set when loading a drawable.
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.EmptyDrawable.Draw">
            <inheritdoc/>
        </member>
        <member name="T:Edelweiss.Mapping.Drawables.Line">
            <summary>
            A class that represents a drawable line
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Line.#ctor">
            <summary>
            A class that represents a drawable line
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Line.#ctor(MoonSharp.Interpreter.Table)">
            <summary>
            Creates a line from a given Lua table
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Line.#ctor(System.Drawing.Point,System.Drawing.Point,System.String,System.Single)">
            <summary>
            Creates a line between the given two points
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Line.#ctor(System.Single,System.Single,System.Single,System.Single,System.String,System.Single)">
            <summary>
            Creates a line between the given coordinates
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Line.Draw">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Line.ToLuaTable(MoonSharp.Interpreter.Script)">
            <summary>
            Converts the line to a Lua table
            </summary>
        </member>
        <member name="T:Edelweiss.Mapping.Drawables.NinePatch">
            <summary>
            A drawable object that draws tileable textures
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.NinePatch.#ctor">
            <summary>
            A drawable object that draws tileable textures
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.NinePatch.texture">
            <summary>
            The texture key of the NinePatch
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.NinePatch.mode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.NinePatch.borderMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.NinePatch.fillMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.NinePatch.x">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.NinePatch.y">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.NinePatch.width">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.NinePatch.height">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.NinePatch.tileSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.NinePatch.tileWidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.NinePatch.tileHeight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.NinePatch.borderLeft">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.NinePatch.borderRight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.NinePatch.borderTop">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.NinePatch.borderBottom">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.NinePatch.color">
            <summary>
            
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.NinePatch.#ctor(MoonSharp.Interpreter.Table)">
            <summary>
            Creates a NinePatch from the given Lua table
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.NinePatch.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a NinePatch with the given parameters
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.NinePatch.Draw">
            <summary>
            Draws the NinePatch to the current SpriteDestination.
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.NinePatch.Bounds">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.NinePatch.ToLuaTable(MoonSharp.Interpreter.Script)">
            <summary>
            Converts the NinePatch to a Lua table.
            </summary>
        </member>
        <member name="T:Edelweiss.Mapping.Drawables.Rect">
            <summary>
            A class that represents a drawable rectangle.
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Rect.#ctor">
            <summary>
            A class that represents a drawable rectangle.
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.Rect.x">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.Rect.y">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.Rect.width">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.Rect.height">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.Rect.color">
            <summary>
            The fill color for the rectangle
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.Rect.borderColor">
            <summary>
            The border color for the rectangle
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.Rect.mode">
            <summary>
            Can be bordered, fill, or line.
            Defaults to bordered.
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Rect.#ctor(MoonSharp.Interpreter.Table)">
            <summary>
            Creates a rectangle from the given Lua table.
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Creates a rectangle with the given parameters
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Rect.#ctor(System.Drawing.Rectangle,System.String,System.String)">
            <summary>
            Creates a drawable rectangle from the given System.Drawing.Rectangle
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Rect.Draw">
            <summary>
            Draws the rectangle to the current SpriteDestination
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Rect.Bounds">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Rect.ToLuaTable(MoonSharp.Interpreter.Script)">
            <summary>
            Converts the Rectangle to a Lua table.
            </summary>
        </member>
        <member name="T:Edelweiss.Mapping.Drawables.Sprite">
            <summary>
            
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Sprite.#ctor(System.String,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Sprite.#ctor(System.String)">
            <summary>
            Creates a sprite with the given texture key
            </summary>
            <param name="texture">The texture of the sprite relative to Gameplay/</param>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Sprite.#ctor(System.String,Edelweiss.Mapping.Entities.Entity)">
            <summary>
            Creates a sprite with the given texture key at the entity's position with some of the entity's data
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Sprite.#ctor(System.String,System.Drawing.Point)">
            <summary>
            Creates a sprite at the given texture key at the given point
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Sprite.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Sprite.#ctor(MoonSharp.Interpreter.Table)">
            <summary>
            Creates a sprite from the given Lua table
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Sprite.ToLuaTable(MoonSharp.Interpreter.Script)">
            <summary>
            Converts the sprite to a Lua table that is compatible with Loenn
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Sprite.Draw">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Sprite.Bounds">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Sprite.ToJObject">
            <summary>
            Converts the sprite to a shape JObject that can be drawn by the frontend
            </summary>
        </member>
        <member name="T:Edelweiss.Mapping.Drawables.SpriteDestination">
            <summary>
            A disposable object to draw sprites to a particular JArray.
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.SpriteDestination.destination">
            <summary>
            The array to which sprites are drawn
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.SpriteDestination.offsetX">
            <summary>
            The horizontal offset for the sprites
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.SpriteDestination.offsetY">
            <summary>
            The vertical offset for the sprites
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.SpriteDestination.#ctor(Newtonsoft.Json.Linq.JArray,System.Int32,System.Int32)">
            <summary>
            Creates a SpriteDestination for the given JArray and offsets
            </summary>
            <param name="shapes">The array to which sprites are drawn</param>
            <param name="offsetX">The horizontal offset for the sprites</param>
            <param name="offsetY">The vertical offset for the sprites</param>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.SpriteDestination.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:Edelweiss.Mapping.Drawables.Tiles">
            <summary>
            A class that draws tile data
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.Tiles.foreground">
            <summary>
            Whether this object draws foreground tiles
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.Tiles.width">
            <summary>
            The dimensions in tiles of the drawable
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.Tiles.height">
            <summary>
            The dimensions in tiles of the drawable
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.Tiles.x">
            <summary>
            The position of the drawable in pixels
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.Tiles.y">
            <summary>
            The position of the drawable in pixels
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.Tiles.data">
            <summary>
            The tile data this drawable contains
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Drawables.Tiles.opacity">
            <summary>
            The opacity of the tile object. 1 is fully opaque and 0 is fully transparent
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Tiles.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Tiles.#ctor(MoonSharp.Interpreter.Table)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Tiles.#ctor(Edelweiss.Utils.TileData,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Creates a drawable tiles object with the given parameters
            </summary>
            <param name="tile">The tile data to use</param>
            <param name="x">The x-coordinate of the drawable in pixels</param>
            <param name="y">The y-coordinate of the drawable in pixels</param>
            <param name="tileWidth">The width of the drawable in tiles</param>
            <param name="tileHeight">The height of the drawable in tiles</param>
            <param name="opacity">The opacity of the drawable</param>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Tiles.#ctor(System.String,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Creates a drawable tiles object with the given parameters
            </summary>
            <param name="tileID">The ID of the tile to use</param>
            <param name="foreground">Whether the tile is a foreground tile</param>
            <param name="x">The x-coordinate of the drawable in pixels</param>
            <param name="y">The y-coordinate of the drawable in pixels</param>
            <param name="tileWidth">The width of the drawable in tiles</param>
            <param name="tileHeight">The height of the drawable in tiles</param>
            <param name="opacity">The opacity of the drawable</param>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Tiles.Draw">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Tiles.Bounds">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Drawables.Tiles.ToLuaTable(MoonSharp.Interpreter.Script)">
            <inheritdoc/>
        </member>
        <member name="T:Edelweiss.Mapping.Entities.CSEntityData">
            <summary>
            Base class for entity data defined in C#
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.CSEntityData.placement">
            <summary>
            The name of the placement for this specific entity
            </summary>
        </member>
        <member name="P:Edelweiss.Mapping.Entities.CSEntityData.EntityName">
            <summary>
            The name of the entity
            </summary>
        </member>
        <member name="P:Edelweiss.Mapping.Entities.CSEntityData.Name">
            <inheritdoc/>
        </member>
        <member name="P:Edelweiss.Mapping.Entities.CSEntityData.DisplayName">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.CSEntityData.OnRegister">
            <summary>
            Adds the entity data to the CelesteModLoader list
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.CSEntityData.Draw(Newtonsoft.Json.Linq.JArray,Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.CSEntityData.NodeDraw(Newtonsoft.Json.Linq.JArray,Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.CSEntityData.GetDefaultRectangle(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.CSEntityData.PlacementNames">
            <summary>
            The names of the placements this entity has
            </summary>
            <returns></returns>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.CSEntityData.CycleBoolean(Edelweiss.Mapping.Entities.Entity,System.String,System.Int32)">
            <summary>
            Cycles a boolean value of an entity by the given amount
            </summary>
            <param name="entity">The entity being cycled</param>
            <param name="key">The field being cycled</param>
            <param name="amount">The amount to cycle by. If even, does nothing</param>
        </member>
        <member name="T:Edelweiss.Mapping.Entities.Entity">
            <summary>
            Class containing data for an entity placed in the map.
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.Entity.#ctor(System.String,System.String,System.Drawing.Point[])">
            <summary>
            Class containing data for an entity placed in the map.
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.Entity._name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Edelweiss.Mapping.Entities.Entity.EntityName">
            <summary>
            The name of the entity without the placement
            </summary>
        </member>
        <member name="P:Edelweiss.Mapping.Entities.Entity.PlacementName">
            <summary>
            The name of the placement without the entity name
            </summary>
        </member>
        <member name="P:Edelweiss.Mapping.Entities.Entity.Name">
            <summary>
            The name of the entity. Setting it automatically changes the entity data
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.Entity._id">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.Entity._type">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.Entity.nodes">
            <summary>
            The positions of the nodes the entity has
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.Entity.data">
            <summary>
            The placement data for the entity;
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.Entity.x">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.Entity.y">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.Entity.width">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.Entity.height">
            <summary>
            
            </summary>
        </member>
        <member name="P:Edelweiss.Mapping.Entities.Entity.rotation">
            <summary>
            The rotation of the entity
            </summary>
        </member>
        <member name="P:Edelweiss.Mapping.Entities.Entity.justificationX">
            <summary>
            The x-axis justification of the entity
            </summary>
        </member>
        <member name="P:Edelweiss.Mapping.Entities.Entity.justificationY">
            <summary>
            The y-axis justification of the entity
            </summary>
        </member>
        <member name="P:Edelweiss.Mapping.Entities.Entity.scaleX">
            <summary>
            The x-axis scale of the entity
            </summary>
        </member>
        <member name="P:Edelweiss.Mapping.Entities.Entity.scaleY">
            <summary>
            The y-axis scale of the entity
            </summary>
        </member>
        <member name="P:Edelweiss.Mapping.Entities.Entity.depth">
            <summary>
            The depth of the entity
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.Entity.DefaultFromData(Edelweiss.Mapping.Entities.EntityData,Edelweiss.Mapping.Entities.RoomData)">
            <summary>
            Creates a default entity with the placement data from the given entity data
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.Entity.Resize(System.Int32,System.Int32,System.Int32)">
            <summary>
            Resizes the entity to the desired width and height while respecting the size bounds for the entity
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.Entity.ToLuaTable(MoonSharp.Interpreter.Script)">
            <summary>
            Converts the entity to a Lua table compatible with Loenn
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.Entity.PointToTable(System.Drawing.Point,MoonSharp.Interpreter.Script)">
            <summary>
            Converts a point in local space to global space and then converts it to a table
            </summary>
            <param name="point"></param>
            <param name="script">The script the table should belong to</param>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.Entity.GetNode(System.Int32)">
            <summary>
            Gets the position of the node in global space
            </summary>
            <param name="nodeIndex">The node's 0-based index</param>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.Entity.SetNodeOffset(System.Int32,System.Int32)">
            <summary>
            Sets the value nodes should be offset by. Used when drawing sprite for nodes when no nodeSprite is defined
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.Entity.Draw(System.String,System.Int32,System.Boolean)">
            <summary>
            Draws the entity to the frontend
            </summary>
            <param name="entityObject">The ID of the entity object in the viewport if the entity should be drawn to an existing object. Null if not.</param>
            <param name="entityIndex"></param>
            <param name="updatePosition"></param>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.Entity.Rotate(System.Int32)">
            <summary>
            Rotates the entity by a given direction. Clockwise rotations are positive and anticlockwise ones are negative
            </summary>
            <param name="direction"></param>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.Entity.Flip(System.Boolean,System.Boolean)">
            <summary>
            Flips the entity along the given axes
            </summary>
            <param name="horizontal">Whether or not the entity should be flipped horizontally</param>
            <param name="vertical">Whether or not the entity should be flipped vertically</param>
            <returns>True if flipping affected the entity, false if not</returns>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.Entity.Cycle(System.Int32)">
            <summary>
            Cycles the entity's state by the given amount
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.Entity.AddNode(System.Drawing.Point)">
            <summary>
            Adds a node to the entity if nodelimits allow
            </summary>
            <param name="relativePosition">The position of the node relative to the entity</param>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.Entity.TryRemoveNode(System.Int32)">
            <summary>
            Attempts to remove a node from the entity respecting the node limits
            </summary>
            <param name="index">The index of the node to remove</param>
            <returns>Whether the node could successfully be removed</returns>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.Entity.AddToLookup(Edelweiss.Mapping.SaveLoad.StringLookup)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.Entity.Encode(System.IO.BinaryWriter)">
            <inheritdoc/>
        </member>
        <member name="P:Edelweiss.Mapping.Entities.Entity.Item(System.String)">
            <summary>
            Gets the data with the given key
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.Entity.GetNodes">
            <summary>
            Gets the nodes of the entity in global space
            </summary>
            <returns></returns>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.Entity.UpdateData(Newtonsoft.Json.Linq.JObject,System.Int32,Edelweiss.Mapping.Entities.Entity[])">
            <summary>
            Updates the entity's data with the values from the given data
            </summary>
        </member>
        <member name="T:Edelweiss.Mapping.Entities.EntityData">
            <summary>
            Base class for entity data
            </summary>
        </member>
        <member name="P:Edelweiss.Mapping.Entities.EntityData.Name">
            <summary>
            The name of the entity
            </summary>
        </member>
        <member name="P:Edelweiss.Mapping.Entities.EntityData.DisplayName">
            <summary>
            The name of the entity as displayed in Edelweiss
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.EntityData.Texture(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)">
            <summary>
            The texture key of the entity, relative to Gameplay/
            </summary>
            <param name="room">The room the entity is in</param>
            <param name="entity">The entity instance</param>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.EntityData.Sprite(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)">
            <summary>
            Gets the sprites for the entity. Defaults to returning a sprite with the texture key returned by <see cref="M:Edelweiss.Mapping.Entities.EntityData.Texture(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)"/>.
            </summary>
            <param name="room">The room the entity is in</param>
            <param name="entity">The entity instance</param>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.EntityData.Draw(Newtonsoft.Json.Linq.JArray,Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)">
            <summary>
            Draws the entity to the shapes array.
            Defaults to drawing the sprites returned by <see cref="M:Edelweiss.Mapping.Entities.EntityData.Sprite(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)"/> onto the array.
            </summary>
            <param name="shapes">The list of shapes this entity will be made up of</param>
            <param name="room">The room the entity is in</param>
            <param name="entity">The entity instance</param>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.EntityData.Rectangle(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)">
            <summary>
            Returns the rectangle that contains the entity.
            Defaults to returning a rectangle with the width and height of the entity.
            If these are zero, returns a 4px * 4px rectangle centered on the entity's position.
            </summary>
            <param name="room">The room the entity is in</param>
            <param name="entity">The entity instance</param>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.EntityData.Color(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)">
            <summary>
            Returns the hex representation of the color of the entity.
            Defaults to white.
            </summary>
            <param name="room">The room the entity is in</param>
            <param name="entity">The entity instance</param>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.EntityData.FillColor(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)">
            <summary>
            Returns the hex representation for the fill color of the entity.
            Defaults to returning <see cref="M:Edelweiss.Mapping.Entities.EntityData.Color(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)"/> if defined.
            </summary>
            <param name="room">The room the entity is in</param>
            <param name="entity">The entity instance</param>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.EntityData.BorderColor(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)">
            <summary>
            Returns the hex representation for the border color of the entity.
            Defaults to returning <see cref="M:Edelweiss.Mapping.Entities.EntityData.Color(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)"/> if defined.
            </summary>
            <param name="room">The room the entity is in</param>
            <param name="entity">The entity instance</param>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.EntityData.NodeLimits(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)">
            <summary>
            The minimum and maximum number of nodes an entity can have.
            A maximum of -1 means the entity does not have an upper limit.
            Defaults to [0, 0]
            </summary>
            <param name="room">The room the entity is in</param>
            <param name="entity">The entity instance</param>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.EntityData.NodeLineRenderType(Edelweiss.Mapping.Entities.Entity)">
            <summary>
            Determines how nodes are connected to the main entity. <br/>
            none: nodes are not connected to the main entity. <br/>
            line: nodes are connected to the previous node <br/>
            fan: all nodes are connected directly to the main entity <br/>
            circle: nodes draw a circle around the main entity. <br/>
            </summary>
            <param name="entity">The entity instance</param>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.EntityData.NodeTexture(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity,System.Int32)">
            <summary>
            The texture of the node, relative to Gameplay/
            Defaults to returning the value returned by <see cref="M:Edelweiss.Mapping.Entities.EntityData.Texture(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)"/>
            </summary>
            <param name="room">The room the entity is in</param>
            <param name="entity">The entity instance</param>
            <param name="nodeIndex">The 0-based index of the node in the entity</param> 
        </member>
        <member name="M:Edelweiss.Mapping.Entities.EntityData.NodeSprite(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity,System.Int32)">
            <summary>
            Gets the sprites for the node. Defaults to returning a sprite with the texture key returned by <see cref="M:Edelweiss.Mapping.Entities.EntityData.NodeTexture(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity,System.Int32)"/> 
            </summary>
            <param name="room">The room the entity is in</param>
            <param name="entity">The entity instance</param>
            <param name="nodeIndex">The 0-based index of the node in the entity</param>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.EntityData.NodeDraw(Newtonsoft.Json.Linq.JArray,Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity,System.Int32)">
            <summary>
            Draws the node onto the shapes array.
            Defaults to drawing the sprites returned by <see cref="M:Edelweiss.Mapping.Entities.EntityData.NodeSprite(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity,System.Int32)"/> onto the array.
            </summary>
            <param name="shapes">The list of shapes the entity will be drawn to</param>
            <param name="room">The room the entity is in</param>
            <param name="entity">The entity instance</param>
            <param name="nodeIndex">The 0-based index of the node in the entity</param>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.EntityData.NodeRectangle(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity,System.Int32)">
            <summary>
            Returns the rectangle containing the node.
            Defaults to returning the entity's rectangle at the node's position
            </summary>
            <param name="room">The room the entity is in</param>
            <param name="entity">The entity instance</param>
            <param name="nodeIndex">The 0-based index of the node in the entity</param>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.EntityData.CanResize(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)">
            <summary>
            A pair of booleans determining whether the entity can be resized horizontally and vertically respectively.
            Each boolean defaults to true if the placement contains a definition for that axis and false if not
            </summary>
            <param name="room">The room the entity is in</param>
            <param name="entity">The entity instance</param>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.EntityData.SizeBounds(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)">
            <summary>
            The minimum and maximum sizes an entity can have. Returns an array with the minimum width, minimum height, maximum width and maximum height.
            Defaults to [1, 1, int.MaxValue, int.MaxValue]
            </summary>
            <param name="room">The room the entity is in</param>
            <param name="entity">The entity instance</param>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.EntityData.NodeVisibility(Edelweiss.Mapping.Entities.Entity)">
            <summary>
            Determines when the entity's nodes should be rendered.
            Defaults to <see cref="F:Edelweiss.Mapping.Entities.Visibility.Selected"/>
            </summary>
            <param name="entity">The entity instance</param>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.EntityData.GetPlacementData">
            <summary>
            Gets the fields of the entity from the placement
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.EntityData.Justification(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)">
            <summary>
            A list of two floats ranging from 0 to 1. Determines the position of the sprite relative to the entity's position.
            </summary>
            <param name="room">The room the entity is in</param>
            <param name="entity">The entity instance</param>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.EntityData.Rotate(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity,System.Int32)">
            <summary>
            Rotates the entity
            </summary>
            <param name="room">The room the entity is in</param>
            <param name="entity">The entity instance</param>
            <param name="rotation">The amount of steps to rotate the entity. Positive means clockwise rotation, negative means anticlockwise rotation.</param>
            <returns>True if the entity is rotated, false if not</returns>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.EntityData.Flip(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity,System.Boolean,System.Boolean)">
            <summary>
            Flips the entity on the given axis
            </summary>
            <param name="room">The room the entity is in</param>
            <param name="entity">The entity instance</param>
            <param name="horizontal">True if the entity should be flipped horizontally</param>
            <param name="vertical">True if the entity should be flipped vertically</param>
            <returns>True if the flip changed the entity, false if not</returns>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.EntityData.Cycle(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity,System.Int32)">
            <summary>
            "Cycles" between different states of the entities (like colors of spinners, colors of cassette blocks, etc.)
            Edelweiss exclusive
            </summary>
            <param name="room">The room the entity is in</param>
            <param name="entity">The entity instance</param>
            <param name="amount">The amount to cycle this entity by</param>
            <returns>True if the entity was changed, false if not</returns>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.EntityData.Rotation(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)">
            <summary>
            The rotation of the entity in degrees
            </summary>
            <param name="room">The room the entity is in</param>
            <param name="entity">The entity instance</param>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.EntityData.Scale(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)">
            <summary>
            The scale of the entity
            </summary>
            <param name="room">The room the entity is in</param>
            <param name="entity">The entity instance</param>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.EntityData.Depth(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)">
            <summary>
            The render depth of the entity. Positive values are behind the player and negative values are in front of the player. Defaults to 0.
            </summary>
            <param name="room">The room the entity is in</param>
            <param name="entity">The entity instance</param>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.EntityData.Mods">
            <summary>
            The list of mods associated with this entity
            </summary>
        </member>
        <member name="P:Edelweiss.Mapping.Entities.EntityData.ModsList">
            <summary>
            
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.EntityData.Selection(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)">
            <summary>
            Gets the selection rectangles for the entity and its nodes
            </summary>
            <param name="room">The room the entity is in</param>
            <param name="entity">The entity instance</param>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.EntityData.GetDefaultRectangle(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity,System.Int32)">
            <summary>
            Gets the default rectangle for the entity and the node index
            </summary>
            <param name="room">The room the entity is in</param>
            <param name="entity">The entity instance</param>
            <param name="nodeIndex">-1 for the main entity</param>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.EntityData.GetFormTemplate(Edelweiss.Mapping.Entities.Entity,System.Int32,Edelweiss.Mapping.Entities.Entity[])">
            <summary>
            Gets the form template for the entity which can be sent to the frontend
            </summary>
            <param name="entity">The entity instance</param>
            <param name="nodeIndex"></param>
            <param name="others">A list of other entities that are also selected</param>
            <returns></returns>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.EntityData.FieldInformation(System.String)">
            <summary>
            Returns custom field information for the given field name
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.EntityData.ProcessField(System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Processes a field's value before it is set to the entity data
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Edelweiss.Mapping.Entities.NodeLineRenderType">
            <summary>
            Determines how nodes are connected to the main entity
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.NodeLineRenderType.None">
            <summary>
            Nodes are not connected to the main entity
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.NodeLineRenderType.Line">
            <summary>
            Nodes are connected to the previous node in the chain
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.NodeLineRenderType.Fan">
            <summary>
            All nodes are connected directly to the main entity
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.NodeLineRenderType.Circle">
            <summary>
            Nodes draw a circle around the main entity.
            </summary>
        </member>
        <member name="T:Edelweiss.Mapping.Entities.Visibility">
            <summary>
            Enum containing options for the visibility of an object
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.Visibility.Never">
            <summary>
            Never visible
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.Visibility.Selected">
            <summary>
            Only visible when the object is selected
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.Visibility.Always">
            <summary>
            Always visible
            </summary>
        </member>
        <member name="T:Edelweiss.Mapping.Entities.Helpers.TileHelper">
            <summary>
            Class that assists in making fake tile entities
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.Helpers.TileHelper.GetMaterial(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets the currently selected tile
            </summary>
            <param name="fallback">The tile used if the current material is unsuitable</param>
            <param name="foreground">Whether to return the foreground material</param>
            <param name="allowAir">Whether air is a valid tile to return</param>
            <returns></returns>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.Helpers.TileHelper.GetSprite(Edelweiss.Mapping.Entities.Entity,System.String,System.Boolean,System.Single)">
            <summary>
            Gets the sprite for a fake tile entity
            </summary>
            <param name="entity">The entity instance</param>
            <param name="key">The key of the placement data containing the tile ID</param>
            <param name="foreground">Whether this is a foreground tile</param>
            <param name="opacity">The opacity of the tile object</param>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.Helpers.TileHelper.GetMergedSprite(System.Collections.Generic.IEnumerable{Edelweiss.Mapping.Entities.Entity},System.String,System.Boolean,System.Single)">
            <summary>
            Gets the merged sprite for multiple fake tile entities
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.Helpers.TileHelper.Cycle(Edelweiss.Mapping.Entities.Entity,System.String,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.Helpers.TileHelper.GetFieldInformation(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets the field information for the entity
            </summary>
            <param name="key">The key currently being asked for</param>
            <param name="tileKey">The key representing the tile for the entity</param>
            <param name="foreground"></param>
            <param name="allowAir"></param>
            <returns></returns>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.Helpers.TileHelper.GetCycleValue(System.String,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.Helpers.TileHelper.Load">
            <inheritdoc/>
        </member>
        <member name="T:Edelweiss.Mapping.Entities.LuaEntityData">
            <summary>
            The class containing entity data for a Loenn entity
            </summary>
            <param name="name">The name of the entity</param>
            <param name="placementName">The name of the placement</param>
            <param name="placement">The placement table that this entity is for</param>
            <param name="script">The script the table belongs to</param>
            <param name="entityTable">The table containing all entity data</param>
            <param name="modName">The name of the mod defining this entity</param>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.LuaEntityData.#ctor(System.String,System.String,MoonSharp.Interpreter.Table,MoonSharp.Interpreter.Script,MoonSharp.Interpreter.Table,System.String)">
            <summary>
            The class containing entity data for a Loenn entity
            </summary>
            <param name="name">The name of the entity</param>
            <param name="placementName">The name of the placement</param>
            <param name="placement">The placement table that this entity is for</param>
            <param name="script">The script the table belongs to</param>
            <param name="entityTable">The table containing all entity data</param>
            <param name="modName">The name of the mod defining this entity</param>
        </member>
        <member name="P:Edelweiss.Mapping.Entities.LuaEntityData.Name">
            <inheritdoc/>
        </member>
        <member name="P:Edelweiss.Mapping.Entities.LuaEntityData.DisplayName">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.LuaEntityData.Texture(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.LuaEntityData.Sprite(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.LuaEntityData.Draw(Newtonsoft.Json.Linq.JArray,Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.LuaEntityData.Justification(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.LuaEntityData.Color(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.LuaEntityData.FillColor(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.LuaEntityData.BorderColor(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.LuaEntityData.NodeLimits(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.LuaEntityData.NodeLineRenderType(Edelweiss.Mapping.Entities.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.LuaEntityData.NodeVisibility(Edelweiss.Mapping.Entities.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.LuaEntityData.NodeTexture(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.LuaEntityData.NodeSprite(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.LuaEntityData.NodeDraw(Newtonsoft.Json.Linq.JArray,Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.LuaEntityData.CanResize(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.LuaEntityData.SizeBounds(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.LuaEntityData.GetPlacementData">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.LuaEntityData.Rotate(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.LuaEntityData.Flip(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.LuaEntityData.Cycle(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity,System.Int32)">
            <inheritdoc/>
            <remarks>
            Implementend in lua as entity.cycle(room, entity, amount)
            </remarks>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.LuaEntityData.Rotation(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.LuaEntityData.Depth(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.LuaEntityData.Mods">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.LuaEntityData.Selection(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.LuaEntityData.Rectangle(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.LuaEntityData.NodeRectangle(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.LuaEntityData.GetDefaultRectangle(Edelweiss.Mapping.Entities.RoomData,Edelweiss.Mapping.Entities.Entity,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Edelweiss.Mapping.Entities.MapData">
            <summary>
            Class containing map data
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapData.rooms">
            <summary>
            The rooms that the map contains
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapData.allEntities">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapData.meta">
            <summary>
            The metadata for this map
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.MapData.AddToLookup(Edelweiss.Mapping.SaveLoad.StringLookup)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.MapData.Encode(System.IO.BinaryWriter)">
            <inheritdoc/>
        </member>
        <member name="T:Edelweiss.Mapping.Entities.MapMeta">
            <summary>
            An object containing metadata for a map
            </summary>
        </member>
        <member name="T:Edelweiss.Mapping.Entities.MapMeta.Inventory">
            <summary>
            Options for player inventory (moves the player has access to)
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.Inventory.Default">
            <summary>
            1 dash, dream blocks enabled, wearing a backpack, ground refills enabled
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.Inventory.CH6End">
            <summary>
            2 dashes, dream blocks enabled, wearing a backpack, ground refills enabled
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.Inventory.Core">
            <summary>
            2 dashes, dream blocks enabled, wearing a backpack, ground refills disabled
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.Inventory.OldSite">
            <summary>
            1 dash, dream blocks disabled, wearing a backpack, ground refills enabled
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.Inventory.Prologue">
            <summary>
            0 dashes, dream blocks disabled, wearing a backpack, ground refills enabled
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.Inventory.TheSummit">
            <summary>
            2 dashes, dream blocks enabled, no backpack, ground refills enabled
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.Inventory.Farewell">
            <summary>
            
            </summary>
        </member>
        <member name="T:Edelweiss.Mapping.Entities.MapMeta.IntroType">
            <summary>
            The way the player enters the map
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.IntroType.WakeUp">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.IntroType.Respawn">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.IntroType.WalkInRight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.IntroType.WalkInLeft">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.IntroType.Jump">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.IntroType.Fall">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.IntroType.TempleMirrorVoid">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.IntroType.ThinkForABit">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.IntroType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.inventory">
            <summary>
            The inventory the player has at the start of the map
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.introType">
            <summary>
            The way the player enters the map
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.path">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.poemID">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.startLevel">
            <summary>
            The room the player spawns into on entering the map
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.heartIsEnd">
            <summary>
            True if collecting a crystal heart ends the map
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.seekerSlowdown">
            <summary>
            Whether Seekers can slow down time while attacking the player
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.theoInBubble">
            <summary>
            Whether Theo (and other holdables) can be held while in a booster
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.dreaming">
            <summary>
            Whether the player starts the chapter dreaming.
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.interlude">
            <summary>
            Whether the map is an interlude chapter: no B-Side and deaths aren't counted
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.overrideASideMeta">
            <summary>
            If false, the meta for the A-Side of this map will take priority over the map's metadata
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.wipe">
            <summary>
            The wipe that plays upon death
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.colourGrade">
             <summary>
            
             </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.bloomBase">
            <summary>
            The base bloom level
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.bloomStrength">
            <summary>
            The bloom strength
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.MapMeta.darknessAlpha">
            <summary>
            The alpha used for darkness
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.MapMeta.AddToLookup(Edelweiss.Mapping.SaveLoad.StringLookup)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.MapMeta.Encode(System.IO.BinaryWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.MapMeta.ToJObject">
            <summary>
            Converts this map meta object to a JSON object
            </summary>
        </member>
        <member name="T:Edelweiss.Mapping.Entities.RoomData">
            <summary>
            Class containing room data for the backend
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.RoomData.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Class containing room data for the backend
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.RoomData.Default">
            <summary>
            The default room data
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.RoomData.name">
            <summary>
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.RoomData.x">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.RoomData.y">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.RoomData.width">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.RoomData.height">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.RoomData.musicLayer1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.RoomData.musicLayer2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.RoomData.musicLayer3">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.RoomData.musicLayer4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.RoomData.musicProgress">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.RoomData.ambienceProgress">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.RoomData.dark">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.RoomData.space">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.RoomData.underwater">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.RoomData.whisper">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.RoomData.disableDownTransition">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.RoomData.music">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.RoomData.ambience">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.RoomData.windPattern">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.RoomData.color">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.RoomData.fgTileData">
            <summary>
            The foreground tiles in the room
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.RoomData.bgTileData">
            <summary>
            The background tiles in the room
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.RoomData.entities">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.Entities.RoomData.map">
            <summary>
            The map this room belongs to
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.RoomData.ToLuaTable(MoonSharp.Interpreter.Script)">
            <summary>
            Converts the room to a Lua table compatible with Loenn.
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.RoomData.RedrawEntities">
            <summary>
            Redraws all entities in the room
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.RoomData.RemoveEntity(Edelweiss.Mapping.Entities.Entity)">
            <summary>
            Removes an entity from the room
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.RoomData.AddToLookup(Edelweiss.Mapping.SaveLoad.StringLookup)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Entities.RoomData.Encode(System.IO.BinaryWriter)">
            <inheritdoc/>
        </member>
        <member name="T:Edelweiss.Mapping.Keybinds.CycleKeybind">
            <summary>
            The keybind for cycling the state of an object. Defaults to E
            </summary>
        </member>
        <member name="P:Edelweiss.Mapping.Keybinds.CycleKeybind.DefaultBindings">
            <inheritdoc/>
        </member>
        <member name="T:Edelweiss.Mapping.Keybinds.DeleteKeybind">
            <summary>
            The keybind for deleting an object. Defaults to Del
            </summary>
        </member>
        <member name="P:Edelweiss.Mapping.Keybinds.DeleteKeybind.DefaultBindings">
            <inheritdoc/>
        </member>
        <member name="T:Edelweiss.Mapping.Keybinds.HorizontalFlipKeybind">
            <summary>
            Keybind for flipping an object horizontally. Defaults to H
            </summary>
        </member>
        <member name="P:Edelweiss.Mapping.Keybinds.HorizontalFlipKeybind.DefaultBindings">
            <inheritdoc/>
        </member>
        <member name="T:Edelweiss.Mapping.Keybinds.NodeKeybind">
            <summary>
            Keybind for adding a node to an object. Defaults to N
            </summary>
        </member>
        <member name="P:Edelweiss.Mapping.Keybinds.NodeKeybind.DefaultBindings">
            <inheritdoc/>
        </member>
        <member name="T:Edelweiss.Mapping.Keybinds.RotateKeybind">
            <summary>
            The keybind for rotating an object. Bound to R by default
            </summary>
        </member>
        <member name="P:Edelweiss.Mapping.Keybinds.RotateKeybind.DefaultBindings">
            <inheritdoc/>
        </member>
        <member name="T:Edelweiss.Mapping.Keybinds.VerticalFlipKeybind">
            <summary>
            Keybind for flipping an object vertically. Defaults to V
            </summary>
        </member>
        <member name="P:Edelweiss.Mapping.Keybinds.VerticalFlipKeybind.DefaultBindings">
            <inheritdoc/>
        </member>
        <member name="T:Edelweiss.Mapping.SaveLoad.IMapSaveable">
            <summary>
            Interface implemented by objects that can be added to a string lookup
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.SaveLoad.IMapSaveable.AddToLookup(Edelweiss.Mapping.SaveLoad.StringLookup)">
            <summary>
            Adds the attributes of the object to the lookup
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.SaveLoad.IMapSaveable.Encode(System.IO.BinaryWriter)">
            <summary>
            Saves the object to the writer
            </summary>
        </member>
        <member name="T:Edelweiss.Mapping.SaveLoad.MapSaveLoad">
            <summary>
            Class responsible for saving and loading Celeste maps
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.SaveLoad.MapSaveLoad.stringLookup">
            <summary>
            A string lookup table for the current map being saved
            </summary>
        </member>
        <member name="F:Edelweiss.Mapping.SaveLoad.MapSaveLoad.backwardsLookup">
            <summary>
            A lookup table for the current map being loaded
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.SaveLoad.MapSaveLoad.SaveMap(Edelweiss.Mapping.Entities.MapData,System.String)">
            <summary>
            Saves a map to the given path
            </summary>
            <param name="map">The map to save</param>
            <param name="filePath">The path to save the file to, including the .bin extension</param>
        </member>
        <member name="M:Edelweiss.Mapping.SaveLoad.MapSaveLoad.CreateLookup(Edelweiss.Mapping.Entities.MapData)">
            <summary>
            Creates a string lookup for the given map
            </summary>
            <param name="map"></param>
        </member>
        <member name="M:Edelweiss.Mapping.SaveLoad.MapSaveLoad.WriteValue(System.IO.BinaryWriter,System.Object)">
            <summary>
            Writes a value's type and the value itself to the writer
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.SaveLoad.MapSaveLoad.ReadValue(System.IO.BinaryReader,System.Byte@)">
            <summary>
            Reads a value from the start of the reader
            </summary>
            <param name="reader"></param>
            <param name="type">The type of data. 0 = bool, 1 = byte, 2 = short, 3 = int, 4 = float, 5 = lookup string, 6 = string, 7 = RLE string</param>
            <returns></returns>
        </member>
        <member name="M:Edelweiss.Mapping.SaveLoad.MapSaveLoad.WriteLookupString(System.IO.BinaryWriter,System.String)">
            <summary>
            Writes the specified string's lookup value to the writer
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.SaveLoad.MapSaveLoad.ReadLookupString(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Edelweiss.Mapping.SaveLoad.MapSaveLoad.WriteAttribute(System.IO.BinaryWriter,System.String,System.Object)">
            <summary>
            Writes an attribute (key and value) to the writer
            </summary>
            <param name="writer"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Edelweiss.Mapping.SaveLoad.MapSaveLoad.WriteRLEString(System.IO.BinaryWriter,System.String)">
            <summary>
            Writes a run-length encoded string to the writer
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.SaveLoad.MapSaveLoad.ReadRLEString(System.IO.BinaryReader)">
            <summary>
            Reads a run-length encoded string from the reader
            </summary>
        </member>
        <member name="T:Edelweiss.Mapping.SaveLoad.StringLookup">
            <summary>
            A lookup table for strings
            </summary>
        </member>
        <member name="P:Edelweiss.Mapping.SaveLoad.StringLookup.Count">
            <summary>
            The number of entries in the lookup
            </summary>
        </member>
        <member name="P:Edelweiss.Mapping.SaveLoad.StringLookup.Item(System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Edelweiss.Mapping.SaveLoad.StringLookup.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Edelweiss.Mapping.SaveLoad.StringLookup.Add(System.String)">
            <summary>
            Adds an element to the lookup
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Edelweiss.Mapping.SaveLoad.StringLookup.Add(System.String[])">
            <summary>
            Adds several elements to the lookup
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Edelweiss.Mapping.SaveLoad.StringLookup.ContainsKey(System.String)">
            <summary>
            Determines whether the lookup contains the specified key
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.SaveLoad.StringLookup.Clear">
            <summary>
            Clears the lookup
            </summary>
        </member>
        <member name="T:Edelweiss.Mapping.Tools.MappingTool">
            <summary>
            The base class for any tools used in mapping
            </summary>
        </member>
        <member name="P:Edelweiss.Mapping.Tools.MappingTool.DisplayName">
            <summary>
            The display name of the tool.
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Tools.MappingTool.IsSearched(System.String)">
            <summary>
            Returns true if the input material matches the current search term
            </summary>
        </member>
        <member name="P:Edelweiss.Mapping.Tools.MappingTool.ClickingTriggersDrag">
            <summary>
            If true, clicking will also trigger <see cref="M:Edelweiss.Mapping.Tools.MappingTool.MouseDrag(Newtonsoft.Json.Linq.JObject,System.Single,System.Single)"/> as well as <see cref="M:Edelweiss.Mapping.Tools.MappingTool.MouseClick(Newtonsoft.Json.Linq.JObject,System.Single,System.Single)"/>  
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Tools.MappingTool.PostSetupContent">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Tools.MappingTool.MouseClick(Newtonsoft.Json.Linq.JObject,System.Single,System.Single)">
            <summary>
            Called when the mouse is clicked while this tool is selected
            </summary>
            <param name="room">The current selected room. Null if no room is selected</param>
            <param name="x">The x-coordinate of the mouse</param>
            <param name="y">The y-coordinate of the mouse</param>
        </member>
        <member name="M:Edelweiss.Mapping.Tools.MappingTool.MouseDrag(Newtonsoft.Json.Linq.JObject,System.Single,System.Single)">
            <summary>
            Called when the mouse is dragged while this tool is selected
            </summary>
            <param name="room">The current selected room. Null if no room is selected</param>
            <param name="x">The x-coordinate of the mouse</param>
            <param name="y">The y-coordinate of the mouse</param>
        </member>
        <member name="M:Edelweiss.Mapping.Tools.MappingTool.MouseRelease(Newtonsoft.Json.Linq.JObject,System.Single,System.Single)">
            <summary>
            Called when the mouse is released while this tool is selected
            </summary>
            <param name="room">The current selected room. Null if no room is selected</param>
            <param name="x">The x-coordinate of the mouse</param>
            <param name="y">The y-coordinate of the mouse</param>
        </member>
        <member name="M:Edelweiss.Mapping.Tools.MappingTool.OnFavourited(System.String)">
            <summary>
            Called when a particular material is favourited by the user
            </summary>
            <param name="material">The ID of the favourited material</param>
        </member>
        <member name="M:Edelweiss.Mapping.Tools.MappingTool.LoadFavourites(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Loads the favourites from the saved preference
            </summary>
            <param name="data">The favourites for this particular tool</param>
        </member>
        <member name="M:Edelweiss.Mapping.Tools.MappingTool.SaveFavourites">
            <summary>
            Saves the favourited materials as a JToken
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Tools.MappingTool.OnSelect">
            <summary>
            Called when the tool is selected
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Tools.MappingTool.OnDeselect">
            <summary>
            Called when the tool is deselected
            </summary>
        </member>
        <member name="M:Edelweiss.Mapping.Tools.MappingTool.GetMaterials">
            <summary>
            Gets the materials that the tool should display.
            </summary>
            <returns>A dictionary of the material IDs to the display names</returns>
        </member>
        <member name="M:Edelweiss.Mapping.Tools.MappingTool.UpdateCursorGhost(System.Single,System.Single)">
            <summary>
            Defines special behaviour for the cursor ghost when the current tool is selected.
            Returns false by default
            </summary>
            <param name="mouseX">The x-coordinate of the mouse in scene coordinates</param>
            <param name="mouseY">The y-coordinate of the mouse in scene coordinates</param>
            <returns>False if default update logic should be used, true to suppress default logic</returns>
        </member>
        <member name="P:Edelweiss.Mapping.Tools.MappingTool.Materials">
            <summary>
            The material names of the tool
            </summary>
        </member>
        <member name="P:Edelweiss.Mapping.Tools.MappingTool.MaterialIDs">
            <summary>
            The material IDs of the tool
            </summary>
        </member>
        <member name="P:Edelweiss.Mapping.Tools.MappingTool.Layers">
            <summary>
            The layers the tool can operate on. Usually affects which materials are available
            </summary>
        </member>
        <member name="P:Edelweiss.Mapping.Tools.MappingTool.Modes">
            <summary>
            The modes the tool can have.
            </summary>
        </member>
        <member name="T:Edelweiss.Mapping.Tools.TileTool">
            <summary>
            A base class for any tool that places tiles
            </summary>
        </member>
        <member name="P:Edelweiss.Mapping.Tools.TileTool.Layers">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Tools.TileTool.GetMaterials">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Tools.TileTool.OnFavourited(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Tools.TileTool.LoadFavourites(Newtonsoft.Json.Linq.JObject)">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Tools.TileTool.SaveFavourites">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Tools.TileTool.SetTile(System.String@,Newtonsoft.Json.Linq.JObject,System.Int32,System.Int32)">
            <summary>
            Sets a tile at the given coordinates to the current selected material.
            </summary>
            <param name="tileData">The tiles that room currently contains</param>
            <param name="room">The room</param>
            <param name="x">The x-coordinate of the tile</param>
            <param name="y">The y-coordinate of the tile</param>
        </member>
        <member name="M:Edelweiss.Mapping.Tools.TileTool.TileInBounds(Newtonsoft.Json.Linq.JObject,System.Int32,System.Int32)">
            <summary>
            Checks if a given tile is in bounds of a room
            </summary>
            <param name="room">The room</param>
            <param name="x">The x-coordinate of the tile</param>
            <param name="y">The y-coordinate of the tile</param>
            <returns>True if the tile is in bounds, false otherwise</returns>
        </member>
        <member name="M:Edelweiss.Mapping.Tools.TileTool.OnDeselect">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Mapping.Tools.TileTool.OnSelect">
            <inheritdoc/>
        </member>
        <member name="T:Edelweiss.Plugins.CustomTab">
            <summary>
            Registers a custom UI tab, like the mapping tab.
            </summary>
        </member>
        <member name="P:Edelweiss.Plugins.CustomTab.LayoutJSON">
            <summary>
            The key for the JSON file containing the layout of the tab
            </summary>
        </member>
        <member name="P:Edelweiss.Plugins.CustomTab.ToolbarJSON">
            <summary>
            The key for the JSON file containing the toolbar for the tab
            </summary>
        </member>
        <member name="P:Edelweiss.Plugins.CustomTab.DisplayName">
            <summary>
            The name that will be displayed in the editor
            </summary>
        </member>
        <member name="F:Edelweiss.Plugins.CustomTab.registeredTabs">
            <summary>
            The list of all custom tabs indexed by their internal IDs
            </summary>
        </member>
        <member name="M:Edelweiss.Plugins.CustomTab.PostSetupContent">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Plugins.CustomTab.OnSelect">
            <summary>
            Called when the user switches to this tab in the editor
            </summary>
        </member>
        <member name="M:Edelweiss.Plugins.CustomTab.OnDeselect">
            <summary>
            Called when the user switches away from this tab in the editor
            </summary>
        </member>
        <member name="M:Edelweiss.Plugins.CustomTab.HandleToolbarClick(System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Called when a toolbar action belonging to this tab's toolbar is triggered
            </summary>
            <param name="actionName">The identifier for the action that was triggered</param>
            <param name="extraData">Any additional data that was requested in the toolbar's JSON file</param>
        </member>
        <member name="T:Edelweiss.Plugins.HookManager">
            <summary>
            Handles all mod hooks
            </summary>
        </member>
        <member name="M:Edelweiss.Plugins.HookManager.AddHook``1(System.String,``0)">
            <summary>
            Registers an on hook
            </summary>
            <typeparam name="T">The type of the delegate (usually autodetected by the compiler and IDE)</typeparam>
            <param name="method">The key of the method: takes the form "TypeName.MethodName"</param>
            <param name="hook">The hook itself</param>
        </member>
        <member name="M:Edelweiss.Plugins.HookManager.AddILHook(System.String,MonoMod.Cil.ILContext.Manipulator)">
            <summary>
            Registers an IL hook
            </summary>
            <param name="method">The method itself (useful for hooking into other mods)</param>
            <param name="hook">The IL manipulator</param>
        </member>
        <member name="M:Edelweiss.Plugins.HookManager.AddHook``1(System.Delegate,``0)">
            <summary>
            Registers an on hook
            </summary>
            <typeparam name="T">The type of the delegate (usually autodetected by the compiler and IDE)</typeparam>
            <param name="method">A reference to the method itself (only works for static methods)</param>
            <param name="hook">The hook itself</param>
        </member>
        <member name="M:Edelweiss.Plugins.HookManager.AddHook``1(System.Reflection.MethodBase,``0)">
            <summary>
            Registers an on hook
            </summary>
            <typeparam name="T">The type of the delegate (usually autodetected by the compiler and IDE)</typeparam>
            <param name="method">The method itself (useful for hooking into other mods)</param>
            <param name="hook">The hook itself</param>
        </member>
        <member name="T:Edelweiss.Plugins.LoadAfterAttribute">
            <summary>
            Classes marked with this attribute will require that the specified types be loaded before they can be loaded
            </summary>
            <param name="otherTypes">The types to load before this type</param>
        </member>
        <member name="M:Edelweiss.Plugins.LoadAfterAttribute.#ctor(System.Type[])">
            <summary>
            Classes marked with this attribute will require that the specified types be loaded before they can be loaded
            </summary>
            <param name="otherTypes">The types to load before this type</param>
        </member>
        <member name="T:Edelweiss.Plugins.LoadedType">
            <summary>
            Base class for a type that needs to be loaded by the mod loader but does not fall under any other category
            </summary>
        </member>
        <member name="T:Edelweiss.Plugins.Logger">
            <summary>
            A class that logs messages
            </summary>
            <param name="plugin">The plugin this logger belongs to</param>
        </member>
        <member name="M:Edelweiss.Plugins.Logger.#ctor(Edelweiss.Plugins.Plugin)">
            <summary>
            A class that logs messages
            </summary>
            <param name="plugin">The plugin this logger belongs to</param>
        </member>
        <member name="E:Edelweiss.Plugins.Logger.OnLog">
            <summary>
            Called when the corresponding Logger method is called
            </summary>
        </member>
        <member name="E:Edelweiss.Plugins.Logger.OnDebug">
            <summary>
            Called when the corresponding Logger method is called
            </summary>
        </member>
        <member name="E:Edelweiss.Plugins.Logger.OnWarn">
            <summary>
            Called when the corresponding Logger method is called
            </summary>
        </member>
        <member name="E:Edelweiss.Plugins.Logger.OnError">
            <summary>
            Called when the corresponding Logger method is called
            </summary>
        </member>
        <member name="E:Edelweiss.Plugins.Logger.OnWrite">
            <summary>
            Called when the corresponding Logger method is called
            </summary>
        </member>
        <member name="M:Edelweiss.Plugins.Logger.#ctor(Edelweiss.Plugins.Plugin,System.String)">
            <summary>
            Creates a Logger object that writes to a specific file
            </summary>
            <param name="plugin">The plugin this logger belongs to</param>
            <param name="filePath">The file that the logger writes to</param>
        </member>
        <member name="M:Edelweiss.Plugins.Logger.Break(System.String)">
            <summary>
            Outputs an empty line in the log
            </summary>
        </member>
        <member name="M:Edelweiss.Plugins.Logger.Break">
            <summary>
            Outputs an empty line in the log
            </summary>
        </member>
        <member name="M:Edelweiss.Plugins.Logger.Log(System.Object)">
            <summary>
            Logs a message
            </summary>
        </member>
        <member name="M:Edelweiss.Plugins.Logger.Debug(System.Object)">
            <summary>
            Logs a message for debugging
            </summary>
        </member>
        <member name="M:Edelweiss.Plugins.Logger.Warn(System.Object)">
            <summary>
            Logs a warning
            </summary>
        </member>
        <member name="M:Edelweiss.Plugins.Logger.Error(System.Object)">
            <summary>
            Logs an error
            </summary>
        </member>
        <member name="M:Edelweiss.Plugins.Logger.Log(System.String,System.Object)">
            <summary>
            Logs a message with a given ID
            </summary>
        </member>
        <member name="M:Edelweiss.Plugins.Logger.Debug(System.String,System.Object)">
            <summary>
            Logs a message for debugging with a given ID
            </summary>
        </member>
        <member name="M:Edelweiss.Plugins.Logger.Warn(System.String,System.Object)">
            <summary>
            Logs a warning with a given ID
            </summary>
        </member>
        <member name="M:Edelweiss.Plugins.Logger.Error(System.String,System.Object)">
            <summary>
            Logs an error with a given ID
            </summary>
        </member>
        <member name="T:Edelweiss.Plugins.Plugin">
            <summary>
            The basic plugin class
            </summary>
        </member>
        <member name="P:Edelweiss.Plugins.Plugin.ID">
            <summary>
            The ID of the plugin. Every plugin needs to have a unique identifier.
            </summary>
        </member>
        <member name="F:Edelweiss.Plugins.Plugin.Logger">
            <summary>
            The logger instance associated with this plugin
            </summary>
        </member>
        <member name="M:Edelweiss.Plugins.Plugin.OnRegister">
            <summary>
            
            </summary>
        </member>
        <member name="M:Edelweiss.Plugins.Plugin.Load">
            <summary>
            Called when the plugin is loaded
            </summary>
        </member>
        <member name="M:Edelweiss.Plugins.Plugin.PostSetupContent">
            <summary>
            Called after all plugins have been loaded
            </summary>
        </member>
        <member name="M:Edelweiss.Plugins.Plugin.CreateNetcode(System.String,System.Boolean)">
            <summary>
            Creates a netcode with a given identifier prefixed by the plugin's ID.
            </summary>
            <param name="name">The name of the netcode</param>
            <param name="positive">If true, the generated netcode will be positive.</param>
        </member>
        <member name="M:Edelweiss.Plugins.Plugin.GetLocalizationKey(System.String)">
            <summary>
            Prefixes the plugin's ID to the given key.
            </summary>
        </member>
        <member name="M:Edelweiss.Plugins.Plugin.GetLocalization(System.String)">
            <summary>
            Prefixes the plugin's ID to the given key and attempts to get the localization for it.
            </summary>
        </member>
        <member name="M:Edelweiss.Plugins.Plugin.CreateCache(System.String)">
            <summary>
            Creates a cache file with the given filename at the cache directory for the plugin
            </summary>
            <param name="filename">The filename (with extension) for the cache file</param>
            <returns>The stream of the cache file</returns>
        </member>
        <member name="M:Edelweiss.Plugins.Plugin.CacheExists(System.String)">
            <summary>
            Returns whether or not the given cache exists.
            </summary>
            <param name="filename">The cache path</param>
        </member>
        <member name="M:Edelweiss.Plugins.Plugin.CachePath(System.String)">
            <summary>
            Returns the absolute path to the cache with the given name
            </summary>
        </member>
        <member name="T:Edelweiss.Plugins.PluginKeybind">
            <summary>
            A saveable preference that contains keybinds
            </summary>
        </member>
        <member name="F:Edelweiss.Plugins.PluginKeybind.QtKeyNames">
            <summary>
            A dictionary relating Qt Keycodes to their names
            </summary>
        </member>
        <member name="F:Edelweiss.Plugins.PluginKeybind.ReverseQtKeyNames">
            <summary>
            A dictionary relating Qt Key names to their keycodes
            </summary>
        </member>
        <member name="P:Edelweiss.Plugins.PluginKeybind.DefaultBindings">
            <summary>
            The keys that this keybind is bound to by default
            </summary>
        </member>
        <member name="P:Edelweiss.Plugins.PluginKeybind.CurrentBindings">
            <summary>
            The keys that this keybind is currently bound to
            </summary>
        </member>
        <member name="E:Edelweiss.Plugins.PluginKeybind.OnPressed">
            <summary>
            The event invoked when this keybind is pressed
            </summary>
        </member>
        <member name="M:Edelweiss.Plugins.PluginKeybind.SetDefaultValue">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Plugins.PluginKeybind.AddListener``1(System.Action)">
            <summary>
            Adds a listener that is invoked whenever the keybind of the target type is pressed
            </summary>
            <typeparam name="T">The type of keybind to listen to</typeparam>
            <param name="callback">The action called when the keybind is pressed</param>
        </member>
        <member name="T:Edelweiss.Plugins.PluginLoader">
            <summary>
            Handles all plugin-related code.
            </summary>
        </member>
        <member name="F:Edelweiss.Plugins.PluginLoader.localization">
            <summary>
            Dictionary containing language keys to localization dictionary.
            </summary>
        </member>
        <member name="M:Edelweiss.Plugins.PluginLoader.LoadAssembly(System.Reflection.Assembly)">
            <summary>
            Loads all the types from an assembly.
            </summary>
            <param name="assembly"></param>
            <returns>The plugin that the assembly defines</returns>
        </member>
        <member name="M:Edelweiss.Plugins.PluginLoader.LoadPythonPlugins(Edelweiss.Utils.PluginAsset)">
            <summary>
            Finds all the python plugins from a given directory and registers them with the frontend.
            </summary>
        </member>
        <member name="M:Edelweiss.Plugins.PluginLoader.LoadJsonFiles(Edelweiss.Utils.PluginAsset,System.String)">
            <summary>
            Loads all the JSON files from a given directory.
            </summary>
            <param name="directory"></param>
            <param name="pluginID">The prefix that will be added to the key</param>
        </member>
        <member name="M:Edelweiss.Plugins.PluginLoader.LoadLangFiles(Edelweiss.Utils.PluginAsset,System.String,System.Boolean)">
            <summary>
            Loads the language files from a given directory.
            </summary>
            <param name="directory">The directory to load from</param>
            <param name="pluginID">The prefix that will be added to the file key</param>
            <param name="celesteMod">True if the directory is a Celeste mod, false if it is an Edelweiss plugin</param>
        </member>
        <member name="M:Edelweiss.Plugins.PluginLoader.RequestJson(System.String)">
            <summary>
            Returns the JSON content for the given key.
            </summary>
            <returns>An empty JSON object as a string if the key does not exist.</returns>
        </member>
        <member name="M:Edelweiss.Plugins.PluginLoader.RequestJObject(System.String)">
            <summary>
            Requests the JSON for a given key and parses it.
            </summary>
        </member>
        <member name="M:Edelweiss.Plugins.PluginLoader.LoadBaseRegistryObjects(System.Reflection.Assembly)">
            <summary>
            Loads the base registry types for a given assembly.
            </summary>
        </member>
        <member name="T:Edelweiss.Plugins.PluginFileData">
            <summary>
            Contains the plugin asset for any given file and the path relative to the plugin asset
            </summary>
        </member>
        <member name="M:Edelweiss.Plugins.PluginFileData.#ctor(System.String,Edelweiss.Utils.PluginAsset)">
            <summary>
            Contains the plugin asset for any given file and the path relative to the plugin asset
            </summary>
        </member>
        <member name="F:Edelweiss.Plugins.PluginFileData.filePath">
            <summary>
            The path of the file relative to the plugin asset
            </summary>
        </member>
        <member name="F:Edelweiss.Plugins.PluginFileData.asset">
            <summary>
            The plugin asset that contains the file
            </summary>
        </member>
        <member name="T:Edelweiss.Plugins.PacketReceiver">
            <summary>
            The base class for a packet receiver
            </summary>
        </member>
        <member name="F:Edelweiss.Plugins.PacketReceiver.receivers">
            <summary>
            All packet receivers, organized by the packet code that they handle.
            </summary>
        </member>
        <member name="P:Edelweiss.Plugins.PacketReceiver.HandledCode">
            <summary>
            The specific <see cref="T:Edelweiss.Network.Netcode"/> that this receiver handles. 
            Whenever the backend receives a packet with this code, this class's <see cref="M:Edelweiss.Plugins.PacketReceiver.ProcessPacket(Edelweiss.Network.Packet)"/> method will be called on that packet.
            </summary>
        </member>
        <member name="M:Edelweiss.Plugins.PacketReceiver.ProcessPacket(Edelweiss.Network.Packet)">
            <summary>
            Called whenever the backend receives a packet with this receiver's <see cref="P:Edelweiss.Plugins.PacketReceiver.HandledCode"/>
            </summary>
            <param name="packet">The received packet</param>
        </member>
        <member name="M:Edelweiss.Plugins.PacketReceiver.Load">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Plugins.PacketReceiver.PostLoad">
            <summary>
            Called after this class is loaded.
            </summary>
        </member>
        <member name="T:Edelweiss.Plugins.PluginRegistryObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:Edelweiss.Plugins.PluginRegistryObject.Plugin">
            <summary>
            The plugin that this object is defined by
            </summary>
        </member>
        <member name="P:Edelweiss.Plugins.PluginRegistryObject.Name">
            <summary>
            The name of the object
            </summary>
        </member>
        <member name="P:Edelweiss.Plugins.PluginRegistryObject.FullName">
            <summary>
            The full identifier for the object, consisting of its defining plugin's ID and the object's name
            </summary>
        </member>
        <member name="M:Edelweiss.Plugins.PluginRegistryObject.OnRegister">
            <summary>
            
            </summary>
        </member>
        <member name="M:Edelweiss.Plugins.PluginRegistryObject.Load">
            <summary>
            Called when the object is entered into the registry
            </summary>
        </member>
        <member name="M:Edelweiss.Plugins.PluginRegistryObject.PostSetupContent">
            <summary>
            Called after all plugins have been loaded.
            </summary>
        </member>
        <member name="T:Edelweiss.Plugins.PluginSaveablePreference">
             <summary>
            
             </summary>
        </member>
        <member name="P:Edelweiss.Plugins.PluginSaveablePreference.Value">
            <summary>
            The value of the preference
            </summary>
        </member>
        <member name="P:Edelweiss.Plugins.PluginSaveablePreference.AllPrefs">
            <summary>
            The loaded JSON object containing all currently loaded preferences
            </summary>
        </member>
        <member name="M:Edelweiss.Plugins.PluginSaveablePreference.Load">
            <inheritdoc/>
        </member>
        <member name="M:Edelweiss.Plugins.PluginSaveablePreference.SetDefaultValue">
            <summary>
            Called if the preference was not found in the saved preferences.
            </summary>
        </member>
        <member name="M:Edelweiss.Plugins.PluginSaveablePreference.PrepForSave">
            <summary>
            Called before the preference is saved, to perform tasks necessary to save correctly
            </summary>
        </member>
        <member name="T:Edelweiss.Network.Netcode">
            <summary>
            The class that registers and handles netcodes 
            </summary>
        </member>
        <member name="F:Edelweiss.Network.Netcode.NONE">
            <summary>
            The default netcode
            </summary>
        </member>
        <member name="F:Edelweiss.Network.Netcode.REGISTER_PYTHON_PLUGINS">
            <summary>
            Registers python plugins. <br/>
            Parameters: <br/>
            - files: a list of string containing the paths of the python files to register
            </summary>
        </member>
        <member name="F:Edelweiss.Network.Netcode.REGISTER_TAB">
            <summary>
            Registers a custom tab. <br/>
            Parameters: <br/>
            - name: the display name of the tab <br/>
            - internalName: the ID of the tab <br/>
            - json: the JSON representation of the tab
            </summary>
        </member>
        <member name="F:Edelweiss.Network.Netcode.ADD_ITEM">
            <summary>
            Adds an item to a ZoomableView. <br/>
            Paramters: <br/>
            - widget: the tracker for the ZoomableView to add the item to <br/>
            - item: the JSON representation of the item <br/>
            - parent (optional): the name of the parent item of this item. Must be in the same ZoomableView
            </summary>
        </member>
        <member name="F:Edelweiss.Network.Netcode.MODIFY_ITEM_SHAPE">
            <summary>
            Modifies the shape data of a particular shape of an item. <br/>
            Parameters: <br/>
            - widget: the tracker for the ZoomableView the item is in <br/>
            - item: the name of the item the shape is in <br/>
            - index: the index of the shape in the item's shapes array <br/>
            - data: the modified data the shape should have
            </summary>
        </member>
        <member name="F:Edelweiss.Network.Netcode.MODIFY_ITEM">
            <summary>
            Modifies the item data of a particular item. <br/>
            Parameters: <br/>
            - widget: the tracker for the ZoomableView the item is in <br/>
            - item: the name of the item <br/>
            - data: the modified data the item should have
            </summary>
        </member>
        <member name="F:Edelweiss.Network.Netcode.REGISTER_TOOLBAR">
            <summary>
            Changes the toolbar to the desired JSON representation. <br/>
            No parameters, only the JSON representation of the toolbar should be sent.
            </summary>
        </member>
        <member name="F:Edelweiss.Network.Netcode.OPEN_POPUP_FORM">
            <summary>
            Opens a popup widget with the passed JSON representation and treats it as a form. <br/>
            No parameters, only the JSON representation of the widget should be sent. <br/>
            Form JSON files must be loaded with <see cref="M:Edelweiss.Utils.FormLoader.LoadForm(System.String,Newtonsoft.Json.Linq.JObject)"/> before being sent
            </summary>
        </member>
        <member name="F:Edelweiss.Network.Netcode.SYNC_VARIABLE">
            <summary>
            Syncs a variable of a given name and value with the frontend. <br/>
            Parameters: <br/>
            - name: the name of the variable <br/>
            - value: the value of the variable
            </summary>
        </member>
        <member name="F:Edelweiss.Network.Netcode.REFRESH_WIDGETS">
            <summary>
            Refreshes widgets with the given trackers <br/>
            Parameters: <br/>
            - widgets: the list of widget trackers that should be refreshed.
            </summary>
        </member>
        <member name="F:Edelweiss.Network.Netcode.OPEN_FILE_DIALOG">
            <summary>
            Opens a file dialog popup <br/>
            Parameters: <br/>
            - file: true if the user needs to select a file, false if directory <br/>
            - path: the path the dialog should default to <br/>
            - mode: "save" if user can select nonexistent paths, "load" if only existing paths can be chosen <br/>
            - pattern: glob patterns that can be selected, each separated by two semicolons: "*.bin;;*.png" <br/>
            - submit: event data when the form is submitted. Sends the path and matched pattern to the specified netcode
            </summary>
        </member>
        <member name="F:Edelweiss.Network.Netcode.KEY_PRESSED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Network.Netcode.LIST_SELECTION_CHANGED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Network.Netcode.TAB_CHANGED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Network.Netcode.TOOL_BUTTON_PRESSED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Edelweiss.Network.Netcode.FORM_SUBMITTED">
            <summary>
            
            </summary>
        </member>
        <member name="M:Edelweiss.Network.Netcode.Get(System.String)">
            <summary>
            Gets the netcode of a certain name
            </summary>
            <param name="name">The name of the netcode</param>
        </member>
        <member name="T:Edelweiss.Network.NetworkManager">
            <summary>
            The class that handles sending and receiving packets on the backend
            </summary>
        </member>
        <member name="F:Edelweiss.Network.NetworkManager.queued">
            <summary>
            The list of packets that are yet to be processed by the UI
            </summary>
        </member>
        <member name="M:Edelweiss.Network.NetworkManager.SendPacket(System.Int64,System.Object)">
            <summary>
            Sends a packet to the UI
            </summary>
            <param name="code">The <see cref="T:Edelweiss.Network.Netcode"/> that the packet should have</param>
            <param name="message">The data that the packet should contain</param>
        </member>
        <member name="M:Edelweiss.Network.NetworkManager.DequeuePacket">
            <summary>
            Removes the first packet from the queue
            </summary>
        </member>
        <member name="M:Edelweiss.Network.NetworkManager.ReceivePacket(Edelweiss.Network.Packet)">
            <summary>
            Called when the UI sends the backend a packet.
            </summary>
            <param name="packet">The received packet</param>
        </member>
        <member name="T:Edelweiss.Network.Packet">
            <summary>
            The class that carries data between backend and UI and vice versa
            </summary>
            <param name="code">The <see cref="T:Edelweiss.Network.Netcode"/> of the packet</param>
            <param name="data">The data the packet contains</param>
        </member>
        <member name="M:Edelweiss.Network.Packet.#ctor(System.Int64,System.String)">
            <summary>
            The class that carries data between backend and UI and vice versa
            </summary>
            <param name="code">The <see cref="T:Edelweiss.Network.Netcode"/> of the packet</param>
            <param name="data">The data the packet contains</param>
        </member>
        <member name="F:Edelweiss.Network.Packet.code">
            <summary>
            The <see cref="T:Edelweiss.Network.Netcode"/> of the packet
            </summary>
        </member>
        <member name="F:Edelweiss.Network.Packet.data">
            <summary>
            The data the packet contains
            </summary>
        </member>
        <member name="T:Edelweiss.Network.SyncedVariable">
            <summary>
            A variable that is synced between backend and frontend automatically whenever its value is set
            </summary>
        </member>
        <member name="E:Edelweiss.Network.SyncedVariable.OnChanged">
            <summary>
            Invoked when the variable's value is changed
            </summary>
        </member>
        <member name="P:Edelweiss.Network.SyncedVariable.Value">
            <summary>
            The value of the variable. Converted to a JObject when synced to the frontend.
            </summary>
        </member>
        <member name="M:Edelweiss.Network.SyncedVariable.#ctor(System.String,System.Object,System.String[])">
            <summary>
            Instantiates a synced variable
            </summary>
            <param name="name">The name of the synced variable</param>
            <param name="defaultValue">The default value of the variable</param>
            <param name="syncedWidgets">The widgets that should refresh when this variable is set</param>
        </member>
        <member name="T:Edelweiss.RegistryTypes.IRegistryObject">
            <summary>
            An interface that all types to be stored in the registry must implement
            </summary>
        </member>
        <member name="M:Edelweiss.RegistryTypes.IRegistryObject.OnRegister">
            <summary>
            Called when the object is added to the registry
            </summary>
        </member>
        <member name="T:Edelweiss.RegistryTypes.BaseRegistryObject">
            <summary>
            Types marked with this attribute are "base" objects: all types inheriting from them are stored in their list.
            </summary>
        </member>
        <member name="T:Edelweiss.RegistryTypes.Registry">
            <summary>
            Contains all registry objects categorised into their respective registry lists
            </summary>
        </member>
        <member name="F:Edelweiss.RegistryTypes.Registry.registry">
            <summary>
            The whole registry
            </summary>
        </member>
        <member name="F:Edelweiss.RegistryTypes.Registry.allRegisteredTypes">
            <summary>
            The list of all types that have been added to the registry, regardless of type
            </summary>
        </member>
        <member name="M:Edelweiss.RegistryTypes.Registry.ForAll``1(System.Action{``0})">
            <summary>
            Performs an action for all registered objects of a given type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action"></param>
        </member>
        <member name="T:Edelweiss.RegistryTypes.RegistryList`1">
            <summary>
            A list of registry objects.
            Stores an integer ID, an instance of the type, and the type itself.
            </summary>
            <typeparam name="T">The type that is stored in the list</typeparam>
        </member>
        <member name="M:Edelweiss.RegistryTypes.RegistryList`1.Add(`0)">
            <summary>
            Adds an instance to the list
            </summary>
            <param name="value">An instance of the object to add</param>
        </member>
        <member name="M:Edelweiss.RegistryTypes.RegistryList`1.GetValue(System.Int32)">
            <summary>
            Gets the instance of a particular ID
            </summary>
        </member>
        <member name="M:Edelweiss.RegistryTypes.RegistryList`1.GetValue(System.Type)">
            <summary>
            Gets the instance of a particular type
            </summary>
        </member>
        <member name="M:Edelweiss.RegistryTypes.RegistryList`1.GetValue``1">
            <summary>
            Gets the instance of a particular type and casts it to that type
            </summary>
        </member>
        <member name="M:Edelweiss.RegistryTypes.RegistryList`1.ContainsType(System.Type)">
            <summary>
            Returns true if the given type is contained in the registry list, else false.
            </summary>
        </member>
        <member name="M:Edelweiss.RegistryTypes.RegistryList`1.GetIndex(`0)">
            <summary>
            Gets the ID of a particular instance
            </summary>
        </member>
        <member name="P:Edelweiss.RegistryTypes.RegistryList`1.Count">
            <summary>
            The number of entries in the list
            </summary>
        </member>
        <member name="T:Edelweiss.Utils.AtlasLoader">
            <summary>
            The class responsible for loading atlases
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.AtlasLoader.LoadAtlasMetaFile(System.String)">
            <summary>
            Loads a .meta atlas file and adds the sprites and sprite data to the CelesteModLoader dictionaries
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Edelweiss.Utils.AtlasLoader.LoadAtlasTexture(System.String)">
            <summary>
            Loads an atlas texture (.data file) and then caches it as a .bmp file.
            </summary>
            <param name="path">The absolute path to the atlas texture</param>
        </member>
        <member name="T:Edelweiss.Utils.CelesteModLoader">
            <summary>
            The class responsible for loading Celeste mods
            </summary>
        </member>
        <member name="F:Edelweiss.Utils.CelesteModLoader.texturePaths">
            <summary>
            The loaded texture keys to the absolute paths to the texture
            </summary>
        </member>
        <member name="E:Edelweiss.Utils.CelesteModLoader.PostLoadMods">
            <summary>
            Called after all mods are loaded on the background thread
            </summary>
        </member>
        <member name="F:Edelweiss.Utils.CelesteModLoader.entities">
            <summary>
            The list of all loaded entities
            </summary>
        </member>
        <member name="F:Edelweiss.Utils.CelesteModLoader.defaultPlacements">
            <summary>
            Contains the name of the default (first) placement (entity_name.placement_name) for a given entity (entity_name)
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.CelesteModLoader.AddEntity(System.String,Edelweiss.Mapping.Entities.EntityData,System.String)">
            <summary>
            Adds an entity to the list of entities
            </summary>
            <param name="mod">The mod this entity belongs to</param>
            <param name="entity">The entity data</param>
            <param name="name">The name of the entity without the placement</param>
        </member>
        <member name="M:Edelweiss.Utils.CelesteModLoader.GetTextureData(System.String)">
            <summary>
            Returns the data for the texture for a given key
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.CelesteModLoader.GetImageSize(System.IO.Stream)">
            <summary>
            Returns the dimensions of an image.
            </summary>
            <param name="stream">The image stream</param>
        </member>
        <member name="T:Edelweiss.Utils.TextureData">
            <summary>
            Contains data for a texture
            </summary>
        </member>
        <member name="P:Edelweiss.Utils.TextureData.width">
            <summary>
            The width of the texture in pixels
            </summary>
        </member>
        <member name="P:Edelweiss.Utils.TextureData.height">
            <summary>
            The height of the texture in pixels
            </summary>
        </member>
        <member name="F:Edelweiss.Utils.TextureData.atlasX">
            <summary>
            The position of the texture in the atlas
            </summary>
        </member>
        <member name="F:Edelweiss.Utils.TextureData.atlasY">
            <summary>
            The position of the texture in the atlas
            </summary>
        </member>
        <member name="F:Edelweiss.Utils.TextureData.atlasWidth">
            <summary>
            The width and height of the texture in the atlas
            </summary>
        </member>
        <member name="F:Edelweiss.Utils.TextureData.atlasHeight">
            <summary>
            The width and height of the texture in the atlas
            </summary>
        </member>
        <member name="F:Edelweiss.Utils.TextureData.atlasOffsetX">
            <summary>
            The position at which the texture starts in the atlas as compared to the padded texture
            </summary>
        </member>
        <member name="F:Edelweiss.Utils.TextureData.atlasOffsetY">
            <summary>
            The position at which the texture starts in the atlas as compared to the padded texture
            </summary>
        </member>
        <member name="P:Edelweiss.Utils.TextureData.paddedWidth">
            <summary>
            The width of the padded texture
            </summary>
        </member>
        <member name="P:Edelweiss.Utils.TextureData.paddedHeight">
            <summary>
            The height of the padded texture
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.TextureData.ToLuaTable(MoonSharp.Interpreter.Script)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Edelweiss.Utils.EdelweissUtils">
            <summary>
            
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.EdelweissUtils.CamelCaseToText(System.String)">
            <summary>
            Converts a camel case or pascal case string into a display name in title case
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.EdelweissUtils.ToTileCoordinate(System.Single,System.Single)">
            <summary>
            Converts mouse coordinates into tile coordinates
            </summary>
            <param name="mouseX">The x-coordinate of the mouse</param>
            <param name="mouseY">The y-coordinate of the mouse</param>
            <returns>The tile coordinates</returns>
        </member>
        <member name="M:Edelweiss.Utils.EdelweissUtils.Toggle``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            If the item is present in the list, it is removed. If it is not present, it is added
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.EdelweissUtils.Color(MoonSharp.Interpreter.DynValue)">
            <summary>
            Converts a DynValue into a hex color string in ARGB format
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.EdelweissUtils.NewColor(MoonSharp.Interpreter.Script,System.String)">
            <summary>
            Returns a table containing the given color
            </summary>
            <param name="script">The script the table belongs to</param>
            <param name="color">The hex code of the color in ARGB format</param>
        </member>
        <member name="M:Edelweiss.Utils.EdelweissUtils.GetColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Gets the hex color code for the given RGBA ranging from 0-1
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.EdelweissUtils.GetColor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the hex color code for the given RGBA ranging from 0-255
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.EdelweissUtils.MatchesSignature(MoonSharp.Interpreter.DynValue[],MoonSharp.Interpreter.DataType[])">
            <summary>
            Returns true if the inputted array of arguments matches the desired signature
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.EdelweissUtils.Formatted(System.Exception)">
            <summary>
            If the exception is a ScriptRuntimeException, formats it appropriately so it displays Lua line numbers.
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.EdelweissUtils.Distance(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Returns the Pythagorean distance between two points.
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.EdelweissUtils.MakeTuple(System.Type@,System.Object[])">
            <summary>
            Converts a list of objects into a ValueTuple and outputs the type
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.EdelweissUtils.Unpack(MoonSharp.Interpreter.Table)">
            <summary>
            Returns all members of a table in tuple form
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.EdelweissUtils.CastTuple``2(System.Object)">
            <summary>
            For every member of the input tuple with the type T, converts it to type U in the output tuple
            </summary>
            <typeparam name="T">The source type</typeparam>
            <typeparam name="U">The target type</typeparam>
        </member>
        <member name="M:Edelweiss.Utils.EdelweissUtils.Value(MoonSharp.Interpreter.DynValue)">
            <summary>
            Gets the value of a DynValue if it is a value type (bool, number, table or string) otherwise null
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Edelweiss.Utils.EdelweissUtils.GetPluginAssetsFromDirectory(System.String)">
            <summary>
            Gets all the directories and zip files in a directory, in that order and converts them to plugin assets
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.EdelweissUtils.Get``1(MoonSharp.Interpreter.Table,System.String,``0)">
            <summary>
            Gets the value of the given key from a table, casting it to the desired type and returning the default value if the key is not in the table.
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.EdelweissUtils.Get``1(MoonSharp.Interpreter.Table,System.Int32,``0)">
            <summary>
            Gets the value of the given index from a table, casting it to the desired type and returning the default value if the index is not in the table.
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.EdelweissUtils.Stream(System.IO.Compression.ZipArchive)">
            <summary>
            Exposes the private stream of a given zip archive
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.EdelweissUtils.Path(System.IO.Compression.ZipArchive)">
            <summary>
            Returns the path to a given zip archive
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.EdelweissUtils.ToLuaTable(System.Drawing.Point,MoonSharp.Interpreter.Script,System.Boolean)">
            <summary>
            Converts a point to a Lua table
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.EdelweissUtils.Cycle``1(System.Collections.Generic.List{``0},``0,System.Int32)">
            <summary>
            Cycles through a list
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.EdelweissUtils.Mod(System.Int32,System.Int32)">
            <summary>
            Takes the modulus of two numbers ensuring the result is positive
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.EdelweissUtils.GetFromMetatable(MoonSharp.Interpreter.Table,System.String)">
            <summary>
            Gets a particular key from the metatable of the table
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.EdelweissUtils.SetToMetatable(MoonSharp.Interpreter.Table,System.String,System.Object)">
            <summary>
            Sets the given key to the given value using metatable setters
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.EdelweissUtils.Combine(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Gets the smallest rectangle that completely covers both input rectangles
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.EdelweissUtils.Scaled(System.Drawing.Rectangle,System.Single,System.Single)">
            <summary>
            Returns the scaled version of the given rectangle
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.EdelweissUtils.Rotated(System.Drawing.Rectangle,System.Single)">
            <summary>
            Returns the smallest axis-aligned rectangle that covers the rotated rectangle
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.EdelweissUtils.Rotated(System.Drawing.Point,System.Single)">
            <summary>
            Rotates a point by a given amount using (0, 0) as the anchor
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.EdelweissUtils.Translated(System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            Translates the given rectangle
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.EdelweissUtils.ToRectangle(MoonSharp.Interpreter.Table)">
            <summary>
            Converts the given table into a rectangle
            </summary>
        </member>
        <member name="T:Edelweiss.Utils.FormLoader">
            <summary>
            A class that loads form JSON files into proper widget objects that can be loaded by Edelweiss
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.FormLoader.LoadForm(System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Converts a JSON form file into a widget object that can be sent to the frontend
            </summary>
            <param name="key">The resource key of the JSON file</param>
            <param name="defaults">The default values of the fields if any. If null, the defined values in the JSON file are used.</param>
            <returns></returns>
        </member>
        <member name="M:Edelweiss.Utils.FormLoader.LoadForm(System.String,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="formData"></param>
            <param name="defaults"></param>
            <returns></returns>
        </member>
        <member name="T:Edelweiss.Utils.Language">
            <summary>
            Handles all localization-related code
            </summary>
        </member>
        <member name="P:Edelweiss.Utils.Language.CurrentLanguage">
            <summary>
            The currently selected language key.
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.Language.GetText(System.String)">
            <summary>
            Returns the localization for a given key
            </summary>
            <returns>The localization if it exists, the key itself if it doesn't</returns>
        </member>
        <member name="M:Edelweiss.Utils.Language.GetTextOrDefault(System.String,System.String)">
            <summary>
            Returns the localization for a given key and the default value if it doesn't exist.
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.Language.TryGetText(System.String,System.String@)">
            <summary>
            Attempts to get the localization for a given key.
            </summary>
            <returns>Whether or not the localization exists.</returns>
        </member>
        <member name="T:Edelweiss.Utils.PluginAsset">
            <summary>
            An object that can contain either a zip file or a directory
            </summary>
        </member>
        <member name="P:Edelweiss.Utils.PluginAsset.IsZipFile">
            <summary>
            Whether or not this asset is a zip file
            </summary>
        </member>
        <member name="P:Edelweiss.Utils.PluginAsset.AssetPath">
            <summary>
            The path to the directory this asset contains if it is not a zip file
            </summary>
        </member>
        <member name="P:Edelweiss.Utils.PluginAsset.PluginArchive">
            <summary>
            The archive this asset contains if it is a zip file
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.PluginAsset.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.PluginAsset.op_Implicit(System.String)~Edelweiss.Utils.PluginAsset">
            <summary>
            Converts a path to a PluginAsset. If the path is a file, it is treated as a zip. If the path is a directory, the asset is treated as a directory.
            </summary>
            <param name="assetPath"></param>
        </member>
        <member name="M:Edelweiss.Utils.PluginAsset.op_Implicit(System.IO.Compression.ZipArchive)~Edelweiss.Utils.PluginAsset">
            <summary>
            Converts a zip archive into a plugin asset
            </summary>
            <param name="pluginArchive"></param>
        </member>
        <member name="M:Edelweiss.Utils.PluginAsset.DirExists(System.String)">
            <summary>
            Returns true if the asset contains a directory with the given path
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.PluginAsset.FileExists(System.String)">
            <summary>
            Returns true if the asset contains a file with the given path
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.PluginAsset.GetFiles(System.String,System.IO.SearchOption)">
            <summary>
            Returns all the files in the asset matching a given pattern
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.PluginAsset.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns all the files in the asset matching a given pattern and that are in the given path
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.PluginAsset.GetStream(System.String)">
            <summary>
            Opens the entry with the given path and returns the stream
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.PluginAsset.ToString">
            <summary>
            Returns the directory if the asset is a directory and the path to the zip archive if it is a zip file.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Edelweiss.Utils.TileLoader">
            <summary>
            The class responsible for loading tiles
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.TileLoader.LoadTileXML(System.String)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Edelweiss.Utils.TileData">
            <summary>
            Contains data for a tile
            </summary>
        </member>
        <member name="P:Edelweiss.Utils.TileData.ID">
            <summary>
            The ID of the tile
            </summary>
        </member>
        <member name="P:Edelweiss.Utils.TileData.path">
            <summary>
            The path to the texture of the tile
            </summary>
        </member>
        <member name="P:Edelweiss.Utils.TileData.atlasX">
            <summary>
            The x-position of the tileset in the atlas
            </summary>
        </member>
        <member name="P:Edelweiss.Utils.TileData.atlasY">
            <summary>
            The y-position of the tileset in the atlas
            </summary>
        </member>
        <member name="P:Edelweiss.Utils.TileData.masks">
            <summary>
            The patterns of the tile
            </summary>
        </member>
        <member name="P:Edelweiss.Utils.TileData.ignores">
            <summary>
            Which tiles, if any, that the tile ignores
            </summary>
        </member>
        <member name="P:Edelweiss.Utils.TileData.name">
            <summary>
            The display name of the tile
            </summary>
        </member>
        <member name="M:Edelweiss.Utils.TileData.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Drawing.Point}},System.String)">
            <param name="ID">The ID of the tile</param>
            <param name="path">The path to the texture of the tile relative to Gameplay/tilesets/</param>
            <param name="masks">The patterns of the tile</param>
            <param name="ignores">Which tiles, if any, that the tile ignores</param>
        </member>
    </members>
</doc>
